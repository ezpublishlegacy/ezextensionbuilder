Requirements
============

- the php cli
- command line tools: svn and/or git, doxygen, tar, zip
- the Composer php tool
- the Pake php build tool
- the Zeta Components php library (only for generating html docs from rst)

(note that the last two will be automatically downloaded for you during the installation process outlined below)

How to install and use eZ Extension Builder
===========================================

This is a 4 steps tutorial. The fifth step is optional ;-)


1. Install the pakefile script and its dependencies via composer (once)
-----------------------------------------------------------------------

You can declare the script as a dependency in the composer.json file of your extension:

{
    "name": "<me>/<myextension>",
    "type": "ezpublish-legacy-extension",
    "description": "Adds/improves the native capabilities of eZ Publish to work as webservices server or webservices client, with a visual webservices debugger thrown in for good measure",
    "license": "GNU General Public License v2.0",
    "minimum-stability": "dev",
    "require": {
        "ezsystems/ezpublish-legacy-installer": "*"
    },
	"require-dev": {
        "gggeek/ezextensionbuilder": "*"
    }
}

Usually you would run the build script in the root directory of your extension,
but that is not a strict rerequisite (you could run the build process in some other dir). ::

    cd <myextension_directory>
    php composer.phar install

If you do not have composer.phar, see here how to install it: http://getcomposer.org/doc/00-intro.md


2. Create the configuration file (once)
---------------------------------------

A configuration file is needed to drive the build. The extension can generate a sample one for you ::

    php vendor/gggeek/ezextensionbuilder/pakefile.php generate-extension-config <myextension>

This will create a directory ./pake/ and save into it the file options-<myextension>.yaml

If your extension already has such file in its source repository, you can instead just download it ::

    php vendor/gggeek/ezextensionbuilder/pakefile.php download-extension-config myextension https://raw.github.com/<me>/<myextension>/master/pake/options-<myextension>.yaml


3. Edit the configuration file (for every build)
------------------------------------------------

You should edit ./pake/options-<myextension>.yaml to suit your needs.

Note that steps 1 and 2 have to be executed only once.

Note also that you can pass any configuration option on the command line as well.
This makes it easy to keep the same configuration file and run different builds. Ex: ::

    php vendor/gggeek/ezextensionbuilder/pakefile.php show-properties --option.version.major=99

4. Launch the final build (for every build)
-------------------------------------------

To get a list of all available tasks run::

    php pakefile.php --tasks

To build your extension run::

    php pakefile.php build <myextension>

NB: every time the extension is built, a fresh version is retrieved from its
svn/git repository. The local copy is not used at all.

NB: The Zeta Components library must be available in your php include_path. If it
is not, you can set the environment variable PHP_CLASSPATH to make it available
to the script.


5. Creating a packaged version of the extension (optional)
----------------------------------------------------------

An ezpackage is a file with the .ezpkg extension, that can contain different
types of eZ Publish contents and structures, and even complete extensions.
Packages can be used to easily share those things between different eZ Publish
installations, or for eg. backup purposes.

To create a packaged version of an extension, you only need to
1. produce an xml 'manifest' file describing your extension
2. tell to the ezextensionbuilder script to create the package

Step 1:
The xml manifest file must be named 'package.xml' and be avaialble in the root
directory of the extension.
NB: some of the tags in this file will be automatically updated during the 'build'
task, such as version number and licensing, so you do not need to worry about them.
The easiest way to create a package.xml file is to run the 'generate-sample-package-xml'
task, which will produce a sample file package.xml in the current directory, then
copy it to the appropriate directory and edit with the appropriate values.

Step 2:
It is sufficient to add the following settings to the yaml configuration file to
have the complete package built as part of the 'dist' task:
create:
    ezpackage: yes


More information
================

Read the README file and anything in the ./docs/ folder for more details
